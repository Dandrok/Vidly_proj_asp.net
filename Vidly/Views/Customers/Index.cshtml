@model IEnumerable<Vidly.Models.Customer>
@*
    Note: I've set the model for this view to IEnumerable<Customer>.
    This is a simple interface implemented by the list class. Since
    in this view we only want to iterate over this list, and we don't
    need any of the operations in the List class (eg Add, Remove, etc),
    it's better to use the IEnumerable interface, which allows use to
    iterate over the list. If in the future, we replace the List with a
    different data structure, as long as it is enumerable, our view code
    will remain unchanged.
*@
@{
    ViewBag.Title = "Customers";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>Customers</h2>
<td>@Html.ActionLink("New Customer", "New", "Customers", new { @class = "btn btn-primary" })</td>

<table id="customers" class="table table-bordered table-hover">
    <thead>

        <tr>
            <th>Customer</th>
            <th>Membership Name</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>

        @*if (!Model.Any())
            {
                <p>We don't have any customers yet.</p>
            }
            else
            {
                        @foreach (var customer in Model)
                        {
                            <tr>
                                <td>@Html.ActionLink(customer.Name, "Edit", "Customers", new { id = customer.Id }, null)</td>
                                <td>@customer.MembershipType.Name</td>
                                <td>
                                    <button data-customer-id="@customer.Id" class="btn-link js-delete">Delete</button>
                                </td>
                            </tr>
                        } bloco substituido pelo jquery*@
    </tbody>
</table>

@*
    1 script: botão de deletar, consumindo WebApi, usando bootbox 4.3.0, adicionar
    referência "~/Script/bootbox.js", em BundleConfig.cs

    2 script: instalar jquery.datatables 1.10.11, fazer alterações em BundleConfig. 
    @Scripts.Render("~/bundles/lib") em _Layout

    3 script: alterações para retornar raw data, melhor performance.

    note: 1º retorno de dados, 2º excluir dados.

*@
@section scripts{

    <script>
        $(document).ready(function () {
            var table = $("#customers").DataTable({
                ajax: {
                    url: "/api/customers",
                    dataSrc: ""
                },
                columns: [
                    {
                        data: "name",
                        render: function (data, type, customer) {
                            return "<a href='/customers/edit/" + customer.id + "'>" + customer.name + "</a>";
                        }
                    },
                    {
                        data: "membershipType.name"
                    },
                    {
                        data: "id",
                        render: function (data) {
                            return "<button class = 'btn-link js-delete' data-customer-id=" + data + ">Delete</button>";
                        }
                    }
                ]
            });

            $("#customers").on("click", ".js-delete", function () {
                var button = $(this);

                bootbox.confirm("Are you sure you want to delete this customer?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/customers/" + button.attr("data-customer-id"),
                            method: "DELETE",
                            success: function () {
                                table.row(button.parents("tr")).remove().draw();
                            }
                        });
                    }
                });
            });
        });
    </script>

}
